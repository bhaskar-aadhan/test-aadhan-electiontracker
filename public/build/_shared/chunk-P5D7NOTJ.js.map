{
  "version": 3,
  "sources": ["../../../app/services/context/ElectionService.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\services\\\\\\\\context\\\\\\\\ElectionService.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\services\\\\context\\\\ElectionService.jsx\");\n  import.meta.hot.lastModified = \"1701583764526.7952\";\n}\n// REMIX HMR END\n\nimport { createContext, useState, useEffect } from \"react\";\nimport { ballotGif } from \"~/assets/images\";\nimport { useQuery, dehydrate, HydrationBoundary, QueryClient } from \"@tanstack/react-query\";\nexport const ElectionContext = createContext(\"aadhan\");\nexport const getElectionData = async () => {\n  const response = await fetch(`https://cmsapis.aadhan.in/election-results/election`);\n  const electionData = await response.json();\n  const data = await electionData;\n  console.log(\"eld\", data);\n  return data;\n};\nexport const loader = async () => {\n  const queryClient = new QueryClient();\n  try {\n    await queryClient.prefetchQuery({\n      queryKey: [\"election\"],\n      queryFn: getElectionData\n    });\n    return json({\n      dehydratedState: dehydrate(queryClient)\n    });\n  } catch (error) {\n    console.log(\"index prefecth error\", error);\n  }\n};\nexport const WebscoketProvider = ({\n  children\n}) => {\n  _s();\n  const [webSocketData, setWebSocketData] = useState(null);\n  const [stateName, setStateName] = useState(\"Telangana\");\n  const [interval, setInterval] = useState(60000);\n  //REST API\n  const apiDataQuery = useQuery({\n    queryKey: ['election'],\n    queryFn: getElectionData,\n    refetchInterval: interval,\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n    refetchOnReconnect: true\n  });\n  useEffect(() => {\n    setWebSocketData(apiDataQuery.data);\n  }, [apiDataQuery.data]);\n  console.log(\"rest api data\", webSocketData);\n  if (apiDataQuery.isLoading || webSocketData === null) {\n    return <div className=\"min-h-screen grid place-content-center\" style={{\n      background: `linear-gradient( -80deg , #d7e9ff, #7db3ff, #d7e9ff)`\n    }}>\r\n        <div className=\"\">\r\n          <img src={ballotGif} alt=\"ballot gif\" />\r\n        </div>\r\n      </div>;\n  }\n  return <ElectionContext.Provider value={[webSocketData, stateName, setStateName]}>\r\n      {children}\r\n    </ElectionContext.Provider>;\n};\n_s(WebscoketProvider, \"CI1BwVhlg0qNI5c4yLYnS+VSHt0=\", false, function () {\n  return [useQuery];\n});\n_c = WebscoketProvider;\nvar _c;\n$RefreshReg$(_c, \"WebscoketProvider\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAqBA,mBAAmD;AAkDzC;AAtEV,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,wDAA0D,EAAE;AAAA,EACrG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA6C;AAC7C,cAAY,IAAI,eAAe;AACjC;AAMO,IAAM,sBAAkB,4BAAc,QAAQ;AAC9C,IAAM,kBAAkB,YAAY;AACzC,QAAM,WAAW,MAAM,MAAM,qDAAqD;AAClF,QAAM,eAAe,MAAM,SAAS,KAAK;AACzC,QAAM,OAAO,MAAM;AACnB,UAAQ,IAAI,OAAO,IAAI;AACvB,SAAO;AACT;AAeO,IAAM,oBAAoB,CAAC;AAAA,EAChC;AACF,MAAM;AACJ,KAAG;AACH,QAAM,CAAC,eAAe,gBAAgB,QAAI,uBAAS,IAAI;AACvD,QAAM,CAAC,WAAW,YAAY,QAAI,uBAAS,WAAW;AACtD,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAS,GAAK;AAE9C,QAAM,eAAe,SAAS;AAAA,IAC5B,UAAU,CAAC,UAAU;AAAA,IACrB,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,sBAAsB;AAAA,IACtB,gBAAgB;AAAA,IAChB,oBAAoB;AAAA,EACtB,CAAC;AACD,8BAAU,MAAM;AACd,qBAAiB,aAAa,IAAI;AAAA,EACpC,GAAG,CAAC,aAAa,IAAI,CAAC;AACtB,UAAQ,IAAI,iBAAiB,aAAa;AAC1C,MAAI,aAAa,aAAa,kBAAkB,MAAM;AACpD,WAAO,mDAAC,SAAI,WAAU,0CAAyC,OAAO;AAAA,MACpE,YAAY;AAAA,IACd,GACI,6DAAC,SAAI,WAAU,IACb,6DAAC,SAAI,KAAK,kBAAW,KAAI,gBAAzB;AAAA;AAAA;AAAA;AAAA,WAAsC,KADxC;AAAA;AAAA;AAAA;AAAA,WAEA,KALG;AAAA;AAAA;AAAA;AAAA,WAML;AAAA,EACJ;AACA,SAAO,mDAAC,gBAAgB,UAAhB,EAAyB,OAAO,CAAC,eAAe,WAAW,YAAY,GAC1E,YADE;AAAA;AAAA;AAAA;AAAA,SAEL;AACJ;AACA,GAAG,mBAAmB,gCAAgC,OAAO,WAAY;AACvE,SAAO,CAAC,QAAQ;AAClB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,mBAAmB;AAEpC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
