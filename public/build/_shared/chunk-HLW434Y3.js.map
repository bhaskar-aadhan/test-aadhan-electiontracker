{
  "version": 3,
  "sources": ["../../../app/services/context/ConstituencyService.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\services\\\\\\\\context\\\\\\\\ConstituencyService.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\services\\\\context\\\\ConstituencyService.jsx\");\n  import.meta.hot.lastModified = \"1701662591455.127\";\n}\n// REMIX HMR END\n\nimport React, { useState, useEffect, createContext } from 'react';\nimport { ballotGif } from \"~/assets/images\";\nimport { useQuery, dehydrate, HydrationBoundary, QueryClient } from \"@tanstack/react-query\";\nexport const ConstituencyContext = createContext(\"aadhan mobile\");\nexport const getElectionData = async () => {\n  const response = await fetch(`https://cmsapis.aadhan.in/election-results/average-party`);\n  const electionData = await response.json();\n  const data = await electionData;\n  console.log(\"eld\", data);\n  return data;\n};\n// export const getElection2Data = async () => {\n//   const response = await fetch(\n//     `https://cmsapis.aadhan.in/election-results/candidate`\n//   );\n//   const election2Data = await response.json();\n//   const data = await election2Data;\n//   console.log(\"el2d\", data);\n//   return data;\n// };\n\nexport const loader = async () => {\n  const queryClient = new QueryClient();\n  try {\n    await queryClient.prefetchQuery({\n      queryKey: [\"election2\"],\n      queryFn: getElectionData\n    });\n    // await queryClient.prefetchQuery({\n    //   queryKey: [\"election3\"],\n    //   queryFn: getElection2Data,\n    // });\n    return json({\n      dehydratedState: dehydrate(queryClient)\n    });\n  } catch (error) {\n    console.log(\"index prefecth error\", error);\n  }\n};\nexport const ConstituencyProvider = ({\n  children\n}) => {\n  _s();\n  const [webSocketData, setWebSocketData] = useState(null);\n  const [select, setSelect] = useState(true);\n  const [stateNameMobile, setStateNameMobile] = useState(\"Mizoram\");\n  const [webSocket2Data, setWebSocket2Data] = useState(null);\n  const [constituency, setConstituency] = useState(\"Gajwel\");\n  const [interval, setInterval] = useState(30000);\n\n  //REST API\n  const apiDataQuery = useQuery({\n    queryKey: ['election2'],\n    queryFn: getElectionData,\n    refetchInterval: interval,\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n    refetchOnReconnect: true\n  });\n  // const api2DataQuery = useQuery({\n  //   queryKey: ['election3'],\n  //   queryFn: getElection2Data,\n  //   refetchInterval: interval,\n  //   refetchOnWindowFocus: true,\n  //   refetchOnMount: true,\n  //   refetchOnReconnect: true\n  // })\n\n  useEffect(() => {\n    setWebSocketData(apiDataQuery.data);\n  }, [apiDataQuery.data]);\n  // useEffect(() => {\n  //   setWebSocket2Data(api2DataQuery.data)\n  // }, [api2DataQuery.data])\n  console.log(\"rest2, rest3 api data\", webSocketData, apiDataQuery.data, apiDataQuery.status);\n  if (apiDataQuery.isLoading || webSocketData === null || webSocketData === undefined) {\n    return <div className=\"min-h-screen grid place-content-center\" style={{\n      background: `linear-gradient( -80deg , #d7e9ff, #7db3ff, #d7e9ff)`\n    }}>\r\n        <div className=\"\">\r\n          <img src={ballotGif} alt=\"ballot gif\" />\r\n        </div>\r\n      </div>;\n  }\n  return <ConstituencyContext.Provider value={[webSocketData, select, setSelect, stateNameMobile, setStateNameMobile, webSocket2Data, constituency, setConstituency]}>\r\n      {children}\r\n    </ConstituencyContext.Provider>;\n};\n_s(ConstituencyProvider, \"MUhbV9oSw4zWnAjNyR2p+eI8GYQ=\", false, function () {\n  return [useQuery];\n});\n_c = ConstituencyProvider;\nvar _c;\n$RefreshReg$(_c, \"ConstituencyProvider\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAqBA,mBAA0D;AAgFhD;AApGV,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4DAA8D,EAAE;AAAA,EACzG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAiD;AACjD,cAAY,IAAI,eAAe;AACjC;AAMO,IAAM,0BAAsB,4BAAc,eAAe;AACzD,IAAM,kBAAkB,YAAY;AACzC,QAAM,WAAW,MAAM,MAAM,0DAA0D;AACvF,QAAM,eAAe,MAAM,SAAS,KAAK;AACzC,QAAM,OAAO,MAAM;AACnB,UAAQ,IAAI,OAAO,IAAI;AACvB,SAAO;AACT;AA6BO,IAAM,uBAAuB,CAAC;AAAA,EACnC;AACF,MAAM;AACJ,KAAG;AACH,QAAM,CAAC,eAAe,gBAAgB,QAAI,uBAAS,IAAI;AACvD,QAAM,CAAC,QAAQ,SAAS,QAAI,uBAAS,IAAI;AACzC,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,uBAAS,SAAS;AAChE,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,uBAAS,IAAI;AACzD,QAAM,CAAC,cAAc,eAAe,QAAI,uBAAS,QAAQ;AACzD,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAS,GAAK;AAG9C,QAAM,eAAe,SAAS;AAAA,IAC5B,UAAU,CAAC,WAAW;AAAA,IACtB,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,sBAAsB;AAAA,IACtB,gBAAgB;AAAA,IAChB,oBAAoB;AAAA,EACtB,CAAC;AAUD,8BAAU,MAAM;AACd,qBAAiB,aAAa,IAAI;AAAA,EACpC,GAAG,CAAC,aAAa,IAAI,CAAC;AAItB,UAAQ,IAAI,yBAAyB,eAAe,aAAa,MAAM,aAAa,MAAM;AAC1F,MAAI,aAAa,aAAa,kBAAkB,QAAQ,kBAAkB,QAAW;AACnF,WAAO,mDAAC,SAAI,WAAU,0CAAyC,OAAO;AAAA,MACpE,YAAY;AAAA,IACd,GACI,6DAAC,SAAI,WAAU,IACb,6DAAC,SAAI,KAAK,kBAAW,KAAI,gBAAzB;AAAA;AAAA;AAAA;AAAA,WAAsC,KADxC;AAAA;AAAA;AAAA;AAAA,WAEA,KALG;AAAA;AAAA;AAAA;AAAA,WAML;AAAA,EACJ;AACA,SAAO,mDAAC,oBAAoB,UAApB,EAA6B,OAAO,CAAC,eAAe,QAAQ,WAAW,iBAAiB,oBAAoB,gBAAgB,cAAc,eAAe,GAC5J,YADE;AAAA;AAAA;AAAA;AAAA,SAEL;AACJ;AACA,GAAG,sBAAsB,gCAAgC,OAAO,WAAY;AAC1E,SAAO,CAAC,QAAQ;AAClB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,sBAAsB;AAEvC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
