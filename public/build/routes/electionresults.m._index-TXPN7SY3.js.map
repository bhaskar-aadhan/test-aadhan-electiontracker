{
  "version": 3,
  "sources": ["../../../app/routes/electionresults.m._index.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\electionresults.m._index.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\electionresults.m._index.jsx\");\n  import.meta.hot.lastModified = \"1701570237023.6082\";\n}\n// REMIX HMR END\n\nimport React, { useContext } from 'react';\nimport { ElectionContext } from '~/services/context/ElectionService';\nimport { getSateData } from '~/services/ElectionServices';\nimport { InfoBar, Card, Download } from '~/components/ElectionResuts';\nconst ElectionresultsMobile = () => {\n  _s();\n  const [webSocketData, stateName] = useContext(ElectionContext);\n  const stateData = getSateData(webSocketData[0]['states'], stateName);\n  return <div className='w-full min-h-screen font__nunitosans flex flex-col items-center bg-[#050D3E]' style={{\n    background: `linear-gradient( -80deg , #d7e9ff, #7db3ff, #d7e9ff)`\n  }}>\r\n        {/* background: `linear-gradient( -80deg , #d7e9ff, #7db3ff, #d7e9ff)`*/}\r\n        <div className=\"info-bar-container w-full flex items-center  bg-[#003D75] px-2 md:px-6\" style={{\n      alignSelf: 'flex-start'\n    }}>\r\n          <InfoBar />\r\n          <Download />\r\n        </div>\r\n        <div className=\"w-full result-cards-container my-5 md:my-0 flex flex-1 justify-center md:content-center gap-y-5 md:gap-x-8 md:gap-y-11 flex-wrap overflow-y-auto\">\r\n          {stateData[0]['media_sources'].map(media => <Card key={media['name']} sx={`w-[90%] mx-auto md:w-[30%]`} media={media['name']} parties={media['party_wise_data']} />)}\r\n        </div>\r\n      </div>;\n};\n_s(ElectionresultsMobile, \"EZ3g08IGcPKmzS6wWYvG2jd4Thw=\");\n_c = ElectionresultsMobile;\nexport default ElectionresultsMobile;\nvar _c;\n$RefreshReg$(_c, \"ElectionresultsMobile\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,mBAAkC;AAexB;AAnCV,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,oDAAsD,EAAE;AAAA,EACjG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA2C;AAC3C,cAAY,IAAI,eAAe;AACjC;AAOA,IAAM,wBAAwB,MAAM;AAClC,KAAG;AACH,QAAM,CAAC,eAAe,SAAS,QAAI,yBAAW,eAAe;AAC7D,QAAM,YAAY,YAAY,cAAc,CAAC,EAAE,QAAQ,GAAG,SAAS;AACnE,SAAO,mDAAC,SAAI,WAAU,gFAA+E,OAAO;AAAA,IAC1G,YAAY;AAAA,EACd,GAEM;AAAA,uDAAC,SAAI,WAAU,0EAAyE,OAAO;AAAA,MACjG,WAAW;AAAA,IACb,GACM;AAAA,yDAAC,qBAAD;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,MACT,mDAAC,sBAAD;AAAA;AAAA;AAAA;AAAA,aAAU;AAAA,SAJZ;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,mDAAC,SAAI,WAAU,oJACZ,oBAAU,CAAC,EAAE,eAAe,EAAE,IAAI,WAAS,mDAAC,gBAAyB,IAAI,8BAA8B,OAAO,MAAM,MAAM,GAAG,SAAS,MAAM,iBAAiB,KAAvG,MAAM,MAAM,GAAvB;AAAA;AAAA;AAAA;AAAA,WAAqH,CAAE,KADrK;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OAZC;AAAA;AAAA;AAAA;AAAA,SAaH;AACN;AACA,GAAG,uBAAuB,8BAA8B;AACxD,KAAK;AACL,IAAO,kCAAQ;AACf,IAAI;AACJ,aAAa,IAAI,uBAAuB;AAExC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
